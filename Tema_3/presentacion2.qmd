---
title: 'Tema 3: Modelos de Espacio-Estado-2'
subtitle: 'Curso: Tópicos Avanzados de Series Temporales'
format: clean-revealjs
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Shu Wei Chou Chen
    #orcid: 0000-0001-5495-2486
    email: shuwei.chou@ucr.ac.cr
    affiliations: Escuela de Estadística, Universidad de Costa Rica
#date: last-modified
lang: es  # español
---


```{r, include=FALSE}
library(ggplot2)
library(forecast)
library(tidyverse)
library(fpp2)
library(astsa)
library(sarima)
library(car)
library(fGarch)
library(xts)
library(vars)
library(MASS)
library(MTS)
library(dlm)
library(dse)
library(numDeriv)
```


1. Representación en espacio de estados
2. El filtro de Kalman: estimaciones de máxima verosimilitud, predicción, suavimzamiento y filtro.


 
## Contenido


<ol start="3">
3. Aplicaciones de modelos de Espacio-Estado: volatilidad estocástica, modelos de regresión dinámica y modelos de suavizamiento exponencial.
</ol>


 
## Introducción 

- Existe una variedad de literatura y paquetes en R para tratar los modelos de espacio de estados.

  - Paquetes generales que proporciona estimación máxima verosimilitud, filtro de Kalman y estimación Bayesiana para DLM o modelos de espacio de estados lineal Gaussiano: [dse](https://cran.r-project.org/web/packages/dse/dse.pdf), [dlm](https://cran.r-project.org/web/packages/dlm/dlm.pdf), [statespacer](https://dylanb95.github.io/statespacer/), etc.

  - Modelo de espacio de estados con familia exponencial.
[KFAS](https://cran.r-project.org/web/packages/KFAS/KFAS.pdf): 

  - Enfoque Bayesiano: [bsts](https://cran.r-project.org/web/packages/bsts/bsts.pdf).

- La dificultad de que cada referencia usa una notación diferente, pero la estructura del modelo es la misma.

- Una buena referencia que resume las diferencias y ventajas de algunos paquetes: [State Space Models in R](https://www.jstatsoft.org/article/view/v041i04)

 
## Introducción 

- Concentramos en el paquete `dlm`

1. **La ecuación de observaciones:** $~~~~y_{t}=F_t \theta_{t} + v_{t},$
2. **La ecuación de estados:** $~~~~~~~~~~~~~\theta_{t}=G_t \theta_{t-1} + w_{t},$

para $t=1,...,n,$ con la condición inicial $\theta_0 \sim N_p(m_0,C_0)$.   

Las variables de estado $\theta_t$ son vectores $p \times 1$ autoregresivos de orden 1, y las observaciones $y_t$ son vectores $m \times 1$.    

$F_t$ y $G_t$ son matrices $m\times p$ y $p\times p$, respectivamente.

$v_t$ es ruido $q\times 1$ tal que $v_t \overset{iid}{\sim} N_m(0,V_t)$. 

$w_t$ es un vector $p\times 1$ tal que $w_t \overset{iid}{\sim} N_p(0,W_t)$. 


 
## Filtro de Kalman

- En la práctica, uno de los interéses es estimar el valor de $\theta_t$ dado los datos observados $y_{1:s}=\left\lbrace y_1,...,y_s \right\rbrace$.

- La estimación de $\theta_t$ se puede clasificar en 3 situaciones:
1. Cuando $s<t$, el problema es llamado **pronóstico** o **predicción**.
2. Cuando $s=t$, el problema es llamado **filtración**.
3. Cuando $s>t$, el problema es llamado **suavizamiento**.

 
## Funciones básicas del paquete `dlm`

- Recuerden que:

1. **La ecuación de observaciones:** $~~~~y_{t}=F_t \theta_{t} + v_{t},~~~~~~~~~ v_t \overset{iid}{\sim} N_m(0,V_t)$
2. **La ecuación de estados:** $~~~~~~~~~~~~~\theta_{t}=G_t \theta_{t-1} + w_{t},~~~~w_t \overset{iid}{\sim} N_p(0,W_t)$

para $t=1,...,n,$ con la condición inicial $\theta_0 \sim N_p(m_0,C_0)$.   

| Parámetro      | Argumento de la función    |
|     -|         -|
| $F$            | `FF`                       |
| $V$            | `V`                        |
| $G$            | `GG`                       |
| $W$            | `W`                        |
| $C_0$          | `C0`                       |
| $m_0$          | `m0`                       |


 
## Notas importantes


- La escogencia de $F_t$ y $G_t$ depende del usuario al observar la naturaleza de las series observadas.

- La especificación del modelo requiere la descripción de las variancias $V_t$ y $W_t$. En la práctica, es común suponer que son constantes en el tiempo, i.e. $V_t=V$ y $W_t=W$.
 
 

 
## Funciones básicas del paquete `dlm`

| Funciones      | Modelo                                  |
|     -|             --|
| `dlm`          | DLM genérico                            |
| `dlmModARMA`   |  modelo ARMA                            |
| `dlmModPoly`   | DLM del polinomio del n-ésimo orden     |
| `dlmReg`       | Regresión lineal                        |
| `dlmSeas`      | factores periódicos, o estacionales     |
| `dlmTrig`      | funciones periódicas o trigonométricas  |

<br>


| funciones      | Método                                  |
|     -|             --|
| `dlmFilter`    |  Filtro de Kalman                   |
| `dlmSmooth`    |  Suavizamiento de Kalman                |
| `dlmForecast`  |  Predicción                             |
| `dlmLL`        |  Función de verosimilitud               |
| `dlmMLE`       |  Estimación ML                          |

 
 
 
## DLM de primer orden (Modelo de nivel local)

- El modelo de nivel local tiene la siguiente estructura:

$$\left. \begin{eqnarray} 
y_t& = & \theta_t +v_t, & v_t \overset{iid}{\sim}N(0,V) \\ 
\theta_t& = & \theta_{t-1} +w_t, & w_t \overset{iid}{\sim}N(0,W) \\ 
\end{eqnarray}\right.$$
 
- $\theta_t$ es escalar y $F_t=G_t=1$.

- La ecuación de estados consiste en una caminata aleatoria y la ecuación de observaciones consiste en un componente de tendencia y un ruido.

- Observe que la variancia de las observaciones y de los estados puede variar en el tiempo.


 
## DLM de primer orden (Modelo de nivel local)

- Usualmente definimos $V_t=V$ y $W_t=W$, entonces para especificar por ejemplo:

$$\left. \begin{eqnarray} 
y_t& = & \theta_t +v_t, & v_t \overset{iid}{\sim}N(0,0.8) \\ 
\theta_t& = & \theta_{t-1} +w_t, & w_t \overset{iid}{\sim}N(0,0.1) \\ 
\end{eqnarray}\right.$$
 
- Usando la función genérica:


```{r eval=FALSE}
dlm(FF = 1, V = 0.8, GG = 1, W = 0.1, m0 = 0, C0 = 100)
```

- o bien usando la función `dlmModPoly`

```{r eval=FALSE}
dlmModPoly(order = 1, dV = 0.8, dW = 0.1, C0 = 100)
```


 
## Ejemplo: Caudal anual del Rio Nilo


Mediciones del caudal anual del Nilo en Asuán, Egipto., 1871–1970, en $10^8 m^3$,

```{r echo=FALSE, fig.align="center", out.width = "60%"}
plot(Nile)
```

 
## Ejemplo: Caudal anual del Rio Nilo

- Después de estimar por máxima veroslimitud el modelo de nivel local, se tiene que

$$\hat{V}=15099, \hat{W}=1469$$


:::: {.columns}

::: {.column width="50%"}

```{r echo=FALSE, fig.align="center", out.width = "90%"}
dlm.orden1 <- function(theta) {
  dlmModPoly(order = 1, dV = theta[1], dW = theta[2])
}
fit <- dlmMLE(Nile, parm = c(100, 2), dlm.orden1, lower = rep(1e-4, 2))
modNile <- dlm.orden1(fit$par)
smoothNile <- dlmSmooth(Nile, modNile)

hwidth <- qnorm(0.05, lower = FALSE) *
  sqrt(unlist(dlmSvd2var(smoothNile$U.S, smoothNile$D.S)))
sm <- cbind(smoothNile$s, as.vector(smoothNile$s) + hwidth %o% c(-1, 1))

ts.plot(sm,col=2,ylim=c(500,1500))
lines(Nile, type = 'o')
```

:::

::: {.column width="50%"}
```{r echo=FALSE, fig.align="center", out.width = "90%"}
filterNile <- dlmFilter(Nile, modNile)
plot(residuals(filterNile, sd = FALSE), type = "o",
         ylab = "Standardized prediction error")
abline(h = 0)

```
:::
::::

 
```{r echo=FALSE, fig.align="center", out.width = "70%"}
tsdiag(filterNile)
```


 

```{r echo=FALSE, fig.align="center", out.width = "75%"}
foreNile <- dlmForecast(filterNile, nAhead = 10)
attach(foreNile)
hwidth <- qnorm(0.25, lower = FALSE) * sqrt(unlist(Q))
fore <- cbind(f, as.vector(f) + hwidth %o% c(-1, 1))
rg <- range(c(fore, window(Nile, start = c(1900, 1))))+c(0,300)
plot(fore, type = "o", pch = 16, plot.type = "s", lty = c(1, 3, 3),
         ylab = "Nile level", xlab = "", xlim = c(1900, 1980), ylim = rg)
lines(window(Nile, start = c(1900, 1)), type = 'o')


lines(window(smoothNile$s, start = c(1900,1)), lty = 5)
abline(v = mean(c(time(f)[1], tail(time(Nile), 1))),
           lty = "dashed", col = "darkgrey")
legend("topleft", lty = c(1, 5, 1, 3), pch = c(1, NA, 16, 16), bty = "n",
           legend = c("observed level", "smoothed level", "forecasted level",
                        "50% probability limits"))
detach(foreNile)
```


 
## DLM de segundo orden

- El modelo de nivel local tiene la siguiente estructura:

$$\left. \begin{eqnarray} 
y_t& = & \theta_{1,t} & & +v_t, & &~~~v_t \overset{iid}{\sim}N(0,V_t) \\ 
\theta_{1,t}& = & \theta_{1,t-1}  +&\theta_{2,t-1} & +w_{1,t}, & &  \\ 
\theta_{2,t}& = &  & \theta_{2,t-1} & +w_{2,t}, & & ~~~ \\
\end{eqnarray}\right.$$

donde $w_t=(w_{1,t},w_{2,t})'\overset{iid}{\sim}N(0,W_t)$
 
Este modelo se puede escribir con la fórmula general: $$F_t=(1,0)~~~G_t=\begin{bmatrix}1 & 1\\ 0 & 1 \end{bmatrix}$$
 
 
## Ejemplo: Caudal anual del Rio Nilo


```{r echo=TRUE, fig.align="center", out.width = "75%"}
dlm.orden2 <- function(theta) {
  dlmModPoly(order = 2, dV = theta[1], dW = c(0,theta[2]))
}
fit2 <- dlmMLE(Nile, parm = c(1,1), dlm.orden2, lower = rep(1e-4,1e-4))
fit2$par

```

 

```{r echo=FALSE, fig.align="center", out.width = "75%"}
filteredNile <- dlmFilter(Nile, mod = modNile2)
resids <- residuals(filteredNile, sd = FALSE)
smoothNile <- dlmSmooth(Nile, modNile2)

theta1 <- dropFirst(smoothNile$s[, 1])
theta2 <- dropFirst(smoothNile$s[, 2])

par(mfrow = c(3, 1), mar = c(2.2, 2.2, 1, 1), cex = 0.8)
plot.ts(Nile, col = "darkgrey", xlab = "", ylab = "", lwd = 2)
lines(theta1, col = "black")
legend("topright", legend = c("Observación", "Estado"), 
       lwd = c(2, 1), col = c("darkgrey", "black"), bty = "n")

plot.ts(theta2, col = "darkgrey", xlab = "", ylab = "", 
        lwd = 2)
legend("topright", legend = "Pendiente", lwd = 2, col = "darkgrey", 
       bty = "n")
plot.ts(resids, ylab = "", xlab = "", col = "darkgrey", 
        lwd = 2)
abline(h = 0)
legend("topright", legend = "Residuales", lwd = 2, col = "darkgrey", 
       bty = "n")


```



 
## Ejemplo: AR(1)

.pull-left[
- Simulación:
```{r echo=TRUE, fig.align="center", out.width = "75%"}
set.seed(12345)
y = arima.sim(n=250,
              list(ar=0.75,ma=0),sd=0.5)
ts.plot(y)
```

]
.pull-right[
- Estimación usando `Arima`:
```{r echo=TRUE, fig.align="center", out.width = "75%"}
(mod.ar = Arima(y,order=c(1,0,0),
                include.mean=FALSE))
```

]


 
## Representación de espacio de estados de AR(1)

- Considere un AR(1):
$$Y_t=\phi Y_{t-1}+a_t, \text{ para } t=1,2,...$$
- Habíamos visto su representación de espacio de estados:

  - la ecuación de observaciones: $~Y_t=\theta_t$
  - la ecuación de estados: $~~~~~~~~~~\theta_t=\phi\theta_{t-1}+w_t,$
  
donde $$\theta_1=Y_1=\sum_{j=0}^{\infty} \phi_1^j w_{1-j}$$

- Del curso pasado, habíamos visto que:

$$E(\theta_t)=E(Y_t)=0 ~\text{, y}~~~\gamma_\theta(h)=\frac{\sigma_w^2 \phi^h}{1-\phi^2}$$

  
 
## Representación de espacio de estados de AR(1)
  
- Para las condiciones iniciales, tenemos:  
$$E(\theta_0)=0 ~\text{, y}~~~Var(\theta_0)=\gamma_\theta(0)=\frac{\sigma_w^2}{1-\phi^2}.$$  
  
  
- Es decir, $F=1,, V=0, G=\phi, W=\sigma^2$

```{r}
# Configuración de un DLM
dlm0 = function(parm){
  return(dlm(FF=1,V=0,GG=parm[1],W=parm[2]^2,
             m0=0,C0=solve(1-parm[1]^2)*parm[2]^2))
}
```


 
## Ejemplo: AR(1)

```{r echo=TRUE, fig.align="center", out.width = "75%"}
# Estimación
fitAR1 = dlmMLE(y=y,parm=c(0.7,1.0),build=dlm0,hessian=T)
# Estimaciones
(coef = fitAR1$par)
```

```{r}
# Error estándar
var = solve(fitAR1$hessian)
sqrt(diag(var))
```



 
## Ejemplo: AR(1)

- Pronóstico de 80% con `dlmFOrecast`:
```{r echo=FALSE}
mod = dlm0(fitAR1$par)
modf = dlmFilter(y,mod)

#pronóstico
pronostico = dlmForecast(modf,nAhead=5,method="plain")
hwidth <- qnorm(0.1, lower = FALSE)*sqrt(unlist(pronostico$Q))
fore <- cbind(pronostico$f, as.vector(pronostico$f) 
              + hwidth %o% c(-1, 1))
colnames(fore) <- c("forecast","li","ls")
fore
```

- Pronóstico con `Arima`:

```{r echo=FALSE}
#Comparación con Arima
mod.ar = Arima(y,order=c(1,0,0),
               include.mean=FALSE)
forecast::forecast(mod.ar,h=5)
```

 
## Combinación de modelos de espacio de estados

- Suponga que tenemos $i=1,...,k$ independientes DLMs para observaciones de $m$ dimensiones.


$$\left. \begin{eqnarray} 
	y_{t}^{(i)}&= & F_t^{(i)} \theta_{t}^{(i)} & + v_{t}^{(i)}, && v_{t}^{(i)}\sim N(0,V^{(i)})\\
	\theta_{t}^{(i)}&= & G_t^{(i)} \theta_{t-1}^{(i)} & + w_{t}^{(i)},&& w_{t}^{(i)}\sim N(0,W^{(i)})
\end{eqnarray}\right.$$

para $t=1,...,n,$ con las condiciones iniciales $\theta_0^{(i)} \sim N_p(m_0^{(i)},C_0^{(i)})$ para $i=1,...,k$.   

- Note que las dimensiones de los estados de cada DLM puede ser diferente. Denote $p_1,...,p_k$ por las dimensiones de cada DLM.

- Se puede especificar varios DLMs (tendencias, ARIMA, estacionalidad, variables exógenas, etc.) y sumarlas de forma independiente para formar un modelo que contempla todas estos componentes.

 
- De esta forma, la observación en el tiempo $t$ es el resultado de la suma de los modelos:
$$y_t=y_t^{(1)}+...+y_t^{(k)}$$
y las cantidades del modelo de espacio de estados sean definidas de la siguiente forma:

$$F_t=\left(F_t^{(1)} ... F_t^{(k)} \right),~~~ V_t=\sum_{i=1}^k V_t^{(i)}$$
$$G_t=\begin{bmatrix} G_t^{(1)} & & \\ & \ddots &  \\ & & G_t^{(k)} \end{bmatrix}~~W_t=\begin{bmatrix} W_t^{(1)} & & \\ & \ddots &  \\ & & W_t^{(k)} \end{bmatrix}$$
 $$m'_t=\left({m_0^{(1)}}' ... {m_0^{(k)}}' \right),~~~ C_t=\begin{bmatrix} C_0^{(1)} & & \\ & \ddots &  \\ & & C_0^{(k)} \end{bmatrix}$$


 
## Ejemplo: `dlmModPoly` y `dlmModARMA`


```{r echo=TRUE, fig.align="center", out.width = "50%"}
n.obs = 250
yt = 2 + arima.sim(n=n.obs,list(ar=.75,ma=0),sd=.5)
plot(yt)
```



 
## Factor estacional - dlmModSeas

- Para un modelo estacional con periodo $s$, podemos considerar estados de dimensión $(s-1)$:

$$F_t=(1,0,...,0),~~~
G=\begin{bmatrix} 
-1 & -1 & \dots & -1 & -1\\ 
1 & 0 & \dots & 0 & 0\\
0 & 1 & \dots & 0 & 0\\
\vdots & \vdots & \ddots & 0 & 0\\
0 & 0 & \dots & 1 & 0 \end{bmatrix}$$

Variacia de las innovaciones de los estados: $diag(W,...,0)$
 
 
## Ejemplo con dlmModSeas


```{r echo=TRUE}
mod=dlmModSeas(frequency = 4, dV=3.5 ,dW=c(4.2,0,0))
mod$FF
mod$V
mod$GG
mod$W
```


 
## Ejemplo

En el laboratorio, veremos:
1. `dlmModPoly` y `dlmModARMA`
2. `dlmModPoly` y `dlmModSeas`: consumo de gas en Reino Unido.
