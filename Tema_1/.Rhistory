#| eval: false
#| echo: true
#| fig-width: 4
#| fig-height: 4
t = seq(0, 1, by=1/200)
amps = c(1, .5, .4, .3, .2, .1)
x = matrix(0, 201, 6)
for (j in 1:6) x[,j] = amps[j]*sin(2*pi*t*2*j)
x = ts(cbind(x, rowSums(x)), start=0, deltat=1/200)
tsplot(x, lty=c(1:6, 1), lwd=c(rep(1,6), 2), ylab="Sinusoids", col=1:6, spaghetti=TRUE,
ylim=c(-1.8,3))
t = seq(0, 1, by=1/200)
amps = c(1, .5, .4, .3, .2, .1)
x = matrix(0, 201, 6)
for (j in 1:6) x[,j] = amps[j]*sin(2*pi*t*2*j)
x = ts(cbind(x, rowSums(x)), start=0, deltat=1/200)
tsplot(x, lty=c(1:6, 1), lwd=c(rep(1,6), 2), ylab="Sinusoids", col=1:6, spaghetti=TRUE,
ylim=c(-1.8,3))
x
t = seq(0, 1, by=1/200)
amps = c(1, .5, .4, .3, .2, .1)
x = matrix(0, 201, 6)
for (j in 1:6) x[,j] = amps[j]*sin(2*pi*t*2*j)
x = ts(cbind(x, rowSums(x)), start=0, deltat=1/200)
x
ave = mvspec(x[,7], kernel('daniell',4),log="yes")
library(ggplot2)
library(forecast)
library(fpp2)
library(astsa)
library(tidyverse)
ave = mvspec(x[,7], kernel('daniell',4),log="yes")
ave = mvspec(x[,7],log="yes")
ave = mvspec(x[,7])
ave = mvspec(x[,7],log="yes")
ave = mvspec(x[,7], kernel('daniell',4),log="yes")
kernel("daniell", m=2,r=1)
kernel("daniell", m=2,r=2)
kernel("daniell", m=2,r=3)
kernel("daniell", m=2,r=4)
k        = kernel("modified.daniell", c(3,3))
soi.smo  = mvspec(soi, kernel=k, taper=0)
abline(v = c(.25,1), lty=2)
soi.smo$df           # df = 17.42618
soi.smo$bandwidth    # B  = 0.2308103
soi.smo = mvspec(soi, spans=c(7,7), taper=0, nxm=4)
soi.smo = mvspec(soi, spans=c(7,7))
soi.smo = mvspec(soi, spans=c(7,7))
soi.smo = mvspec(soi, spans=c(7,7),taper = 0)
soi.smo  = mvspec(soi, kernel=k, taper=0)
soi.smo$kernel
# Otra forma de hacer es con el argumento `spans`
soi.smo1 = mvspec(soi, spans=c(7,7), taper=0)
soi.smo1$kernel
soi.smo1 = mvspec(soi, spans=c(7,7), taper=0)  #7=3*2+1
# hightlight El Nino cycle
rect(1/7, -1e5, 1/3, 1e5, density=NA, col=gray(.5,.2))
mtext("1/4", side=1, line=0, at=.25, cex=.75)
#| echo: true
#| eval: false
param.spec <- spec.ic(soi,  detrend=TRUE, col=4, lwd=2, nxm=4)
C.info<-data.frame(param.spec[[1]])
colnames(C.info)<-c("t","AIC","BIC")
C.info
#| echo: true
param.spec <- spec.ic(soi,  detrend=TRUE, col=4, lwd=2, nxm=4)
names(param.spec)
#| echo: true
param.spec <- spec.ic(soi,  detrend=TRUE, col=4, lwd=2, nxm=4)
names(param.spec)
param.spec[[1]]
param.spec[[2]]
C.info<-data.frame(param.spec[[1]])
colnames(C.info)<-c("t","AIC","BIC")
C.info
C.info %>% gather(
key = "C.Info",
value = "value",
AIC,BIC
) %>% ggplot() +
geom_line( aes(x = t, y = value, group=C.Info,color=C.Info))
#| echo: true
C.info %>% gather(
key = "C.Info",
value = "value",
AIC,BIC
) %>% ggplot() +
geom_line( aes(x = t, y = value, group=C.Info,color=C.Info)) + theme_bw()
library(ggplot2)
library(forecast)
library(fpp2)
library(astsa)
library(tidyverse)
library(TSA)
#El n√∫cleo utilizado
kernel('daniell',4)
plot(kernel("daniell", 4))
par(mfrow=c(2,1))
soi.ave = mvspec(soi, kernel('daniell',4))
abline(v = c(.25,1,2,3), lty=2)
soi.rec = mvspec(rec, kernel('daniell',4))
abline(v=c(.25,1,2,3), lty=2)
# Laboratorio 4 -----------------------------------------------------------
library(ggplot2)
library(forecast)
library(fpp2)
library(astsa)
library(tidyverse)
library(TSA)
