#| eval: false
#| echo: true
#| fig-width: 4
#| fig-height: 4
t = seq(0, 1, by=1/200)
amps = c(1, .5, .4, .3, .2, .1)
x = matrix(0, 201, 6)
for (j in 1:6) x[,j] = amps[j]*sin(2*pi*t*2*j)
x = ts(cbind(x, rowSums(x)), start=0, deltat=1/200)
tsplot(x, lty=c(1:6, 1), lwd=c(rep(1,6), 2), ylab="Sinusoids", col=1:6, spaghetti=TRUE,
ylim=c(-1.8,3))
t = seq(0, 1, by=1/200)
amps = c(1, .5, .4, .3, .2, .1)
x = matrix(0, 201, 6)
for (j in 1:6) x[,j] = amps[j]*sin(2*pi*t*2*j)
x = ts(cbind(x, rowSums(x)), start=0, deltat=1/200)
tsplot(x, lty=c(1:6, 1), lwd=c(rep(1,6), 2), ylab="Sinusoids", col=1:6, spaghetti=TRUE,
ylim=c(-1.8,3))
x
t = seq(0, 1, by=1/200)
amps = c(1, .5, .4, .3, .2, .1)
x = matrix(0, 201, 6)
for (j in 1:6) x[,j] = amps[j]*sin(2*pi*t*2*j)
x = ts(cbind(x, rowSums(x)), start=0, deltat=1/200)
x
ave = mvspec(x[,7], kernel('daniell',4),log="yes")
library(ggplot2)
library(forecast)
library(fpp2)
library(astsa)
library(tidyverse)
ave = mvspec(x[,7], kernel('daniell',4),log="yes")
ave = mvspec(x[,7],log="yes")
ave = mvspec(x[,7])
ave = mvspec(x[,7],log="yes")
ave = mvspec(x[,7], kernel('daniell',4),log="yes")
kernel("daniell", m=2,r=1)
kernel("daniell", m=2,r=2)
kernel("daniell", m=2,r=3)
kernel("daniell", m=2,r=4)
k        = kernel("modified.daniell", c(3,3))
soi.smo  = mvspec(soi, kernel=k, taper=0)
abline(v = c(.25,1), lty=2)
soi.smo$df           # df = 17.42618
soi.smo$bandwidth    # B  = 0.2308103
soi.smo = mvspec(soi, spans=c(7,7), taper=0, nxm=4)
soi.smo = mvspec(soi, spans=c(7,7))
soi.smo = mvspec(soi, spans=c(7,7))
soi.smo = mvspec(soi, spans=c(7,7),taper = 0)
soi.smo  = mvspec(soi, kernel=k, taper=0)
soi.smo$kernel
# Otra forma de hacer es con el argumento `spans`
soi.smo1 = mvspec(soi, spans=c(7,7), taper=0)
soi.smo1$kernel
soi.smo1 = mvspec(soi, spans=c(7,7), taper=0)  #7=3*2+1
# hightlight El Nino cycle
rect(1/7, -1e5, 1/3, 1e5, density=NA, col=gray(.5,.2))
mtext("1/4", side=1, line=0, at=.25, cex=.75)
#| echo: true
#| eval: false
param.spec <- spec.ic(soi,  detrend=TRUE, col=4, lwd=2, nxm=4)
C.info<-data.frame(param.spec[[1]])
colnames(C.info)<-c("t","AIC","BIC")
C.info
#| echo: true
param.spec <- spec.ic(soi,  detrend=TRUE, col=4, lwd=2, nxm=4)
names(param.spec)
#| echo: true
param.spec <- spec.ic(soi,  detrend=TRUE, col=4, lwd=2, nxm=4)
names(param.spec)
param.spec[[1]]
param.spec[[2]]
C.info<-data.frame(param.spec[[1]])
colnames(C.info)<-c("t","AIC","BIC")
C.info
C.info %>% gather(
key = "C.Info",
value = "value",
AIC,BIC
) %>% ggplot() +
geom_line( aes(x = t, y = value, group=C.Info,color=C.Info))
#| echo: true
C.info %>% gather(
key = "C.Info",
value = "value",
AIC,BIC
) %>% ggplot() +
geom_line( aes(x = t, y = value, group=C.Info,color=C.Info)) + theme_bw()
library(ggplot2)
library(forecast)
library(fpp2)
library(astsa)
library(tidyverse)
library(TSA)
#El n√∫cleo utilizado
kernel('daniell',4)
plot(kernel("daniell", 4))
par(mfrow=c(2,1))
soi.ave = mvspec(soi, kernel('daniell',4))
abline(v = c(.25,1,2,3), lty=2)
soi.rec = mvspec(rec, kernel('daniell',4))
abline(v=c(.25,1,2,3), lty=2)
# Laboratorio 4 -----------------------------------------------------------
library(ggplot2)
library(forecast)
library(fpp2)
library(astsa)
library(tidyverse)
library(TSA)
library(ggplot2)
library(forecast)
library(fpp2)
library(astsa)
library(tidyverse)
library(TSA)
2*pi*0.25
autoplot(log(AirPassengers))+
geom_smooth(method='lm', formula= y~x)
mod<-tslm(log(AirPassengers)~trend)
summary(mod)
turista.per = mvspec(mod$residuals)
frequency(mod$residuals)
frequency(flow)
data(flow)
autoplot(flow,ylab='River Flow')
frequency(flow)
100/6
100/40
x1 = 2*cos(2*pi*1:100*6/100)  + 3*sin(2*pi*1:100*6/100)
x2 = 4*cos(2*pi*1:100*10/100) + 5*sin(2*pi*1:100*10/100)
x3 = 6*cos(2*pi*1:100*40/100) #+ 7*sin(2*pi*1:100*40/100)
x = x1 + x2 + x3
par(mfrow=c(2,2))
tsplot(x1, ylim=c(-10,10), main = expression(omega==6/100~~~A^2==13))
tsplot(x2, ylim=c(-10,10), main = expression(omega==10/100~~~A^2==41))
tsplot(x3, ylim=c(-10,10), main = expression(omega==40/100~~~A^2==85))
tsplot(x, ylim=c(-16,16), main="suma")
x3 = 6*cos(2*pi*1:100*40/100) #+ 7*sin(2*pi*1:100*40/100)
tsplot(x3, ylim=c(-10,10), main = expression(omega==40/100~~~A^2==85))
x3 = 6*cos(2*pi*1:100*40/100) + 7*sin(2*pi*1:100*40/100)
tsplot(x3, ylim=c(-10,10), main = expression(omega==40/100~~~A^2==85))
100/40
par(mfrow=c(2,2))
par(mfrow=c(1,1))
tsplot(x3, ylim=c(-10,10), main = expression(omega==40/100~~~A^2==85))
abline(v=c(2.5,5,7.5,10))
abline(v=c(2.5,5,7.5,10),col=2)
tsplot(x1, ylim=c(-10,10), main = expression(omega==6/100~~~A^2==13))
100/6
abline(v=c(100/6,100/6*2),col=2)
abline(v=c(100/6,100/6*2,100/6*3),col=2)
abline(v=c(0,100/6,100/6*2,100/6*3),col=2)
tsplot(x2, ylim=c(-10,10), main = expression(omega==10/100~~~A^2==41))
abline(v=c(0,100/10,100/10*2,100/10*3),col=2)
tsplot(x1, ylim=c(-10,10), main = expression(omega==6/100~~~A^2==13))
abline(v=c(0,100/6,100/6*2,100/6*3),col=2)
tsplot(x2, ylim=c(-10,10), main = expression(omega==10/100~~~A^2==41))
abline(v=c(0,100/10,100/10*2,100/10*3),col=2)
tsplot(x3, ylim=c(-10,10), main = expression(omega==40/100~~~A^2==85))
abline(v=c(0, 100/40, 2*100/40, 3*100/40),col=2)
x3 = 6*cos(2*pi*1:50*40/100) + 7*sin(2*pi*1:50*40/100)
tsplot(x3, ylim=c(-10,10), main = expression(omega==40/100~~~A^2==85))
tsplot(x, ylim=c(-16,16), main="suma")
tsplot(x3, ylim=c(-10,10), main = expression(omega==40/100~~~A^2==85))
abline(v=c(0, 100/40, 2*100/40, 3*100/40),col=2)
x3 = 6*cos(2*pi*1:50*40/100) #+ 7*sin(2*pi*1:50*40/100)
tsplot(x3, ylim=c(-10,10), main = expression(omega==40/100~~~A^2==85))
abline(v=c(0, 100/40, 2*100/40, 3*100/40),col=2)
x3 = 6*cos(2*pi*1:50*40/100) + 7*sin(2*pi*1:50*40/100)
tsplot(x3, ylim=c(-10,10), main = expression(omega==40/100~~~A^2==85))
abline(v=c(0, 100/40, 2*100/40, 3*100/40),col=2)
40/100
10/100
6/100
10/100
40/100
x3 = 6*cos(2*pi*1:100*40/100) + 7*sin(2*pi*1:100*40/100)
tsplot(x3, ylim=c(-10,10), main = expression(omega==40/100~~~A^2==85))
abline(v=c(0, 100/40, 2*100/40, 3*100/40),col=2)
1:100*40/100
2**2
2**2+3**2
library(ggplot2)
library(forecast)
library(fpp2)
library(astsa)
library(tidyverse)
library(TSA)
autoplot(log(AirPassengers))+
geom_smooth(method='lm', formula= y~x)
mod<-tslm(log(AirPassengers)~trend)
turista.per = mvspec(mod$residuals)
class(mod$residuals)
frequency(mod$residuals)
data(flow)
autoplot(flow,ylab='River Flow')
data(milk)
autoplot(milk)+
geom_smooth(method='lm', formula= y~x)
1/12
1/12*2
0.166667/12
1/0.166667
1/12*3
1/0.25
100/6
100/40
library(ggplot2)
library(forecast)
library(fpp2)
library(astsa)
library(tidyverse)
#| echo: true
kernel('daniell',4)
#| echo: true
plot(kernel("daniell", 4))
#| echo: true
par(mfrow=c(2,1))
soi.ave = mvspec(soi, kernel('daniell',4))
abline(v = c(.25,1,2,3), lty=2)
#| echo: true
soi.rec = mvspec(rec, kernel('daniell',4))
abline(v=c(.25,1,2,3), lty=2)
soi.ave$df
9*2
1/2
1/12
knitr::opts_chunk$set(echo = TRUE)
w = rnorm(250,0,1)
par(mfrow=c(2,2))
w = rnorm(250,0,1)
plot.ts(w, main="")
mvspec(w)
mvspec(w, kernel('daniell',4))
mvspec(w, kernel('daniell',7))
arma.spec(ar = 0 , ma =.5, main="MA(1)", col=4)
par(mfrow=c(2,2))
ma.sim <- arima.sim(list(order = c(0,0,1), ma = 0.5), n = 100)
ts.plot(ma.sim)
mvspec(ma.sim)
mvspec(ma.sim, kernel('daniell',4))
mvspec(ma.sim, kernel('daniell',7))
par(mfrow=c(2,2))
arma.spec(ar=c(1,-.9), ma= 0 , main="AR(2)", col=4) #periodico
ar2.sim <- arima.sim(list(order = c(2,0,0), ar = c(1,-0.9)), n = 100)
par(mfrow=c(2,2))
arma.spec(ar=c(0.5), ma= 0 , main="AR(1)", col=4) #periodico
ar1.sim <- arima.sim(list(order = c(1,0,0), ar = c(0.5)), n = 100)
ts.plot(ar1.sim)
mvspec(ar1.sim)
par(mfrow=c(2,2))
arma.spec(ar=c(1,-.9), ma= 0 , main="AR(2)", col=4) #periodico
ar2.sim <- arima.sim(list(order = c(2,0,0), ar = c(1,-0.9)), n = 100)
ts.plot(ar2.sim)
mvspec(ar2.sim)
par(mfrow=c(2,2))
arma.spec(ar=c(1,-.9), ma= 0 , main="AR(2)", col=4) #periodico
ar2.sim <- arima.sim(list(order = c(2,0,0), ar = c(1,-0.9)), n = 100)
ts.plot(ar2.sim)
mvspec(ar2.sim)
mvspec(ar2.sim, kernel('daniell',7))
mvspec(ar2.sim, kernel('daniell',4))
par(mfrow=c(2,2))
arma.spec(ar=c(1,-.9), ma= 0 , main="AR(2)", col=4) #periodico
ar2.sim <- arima.sim(list(order = c(2,0,0), ar = c(1,-0.9)), n = 100)
ts.plot(ar2.sim)
mvspec(ar2.sim)
mvspec(ar2.sim, kernel('daniell',4))
par(mfrow=c(2,2))
arma.spec(ar=c(0.5), ma= 0 , main="AR(1)", col=4) #periodico
ar1.sim <- arima.sim(list(order = c(1,0,0), ar = c(0.5)), n = 100)
ts.plot(ar1.sim)
mvspec(ar1.sim)
mvspec(ar1.sim, kernel('daniell',7))
par(mfrow = c(2,2))
tsplot(soi, ylab="", main="SOI")
acf(soi, lag.max = 60)
tsplot(rec, ylab="", main="Reclutamiento")
acf(rec, lag.max = 60)
par(mfrow=c(2,1))
soi.per = mvspec(soi)
abline(v=1/4, lty="dotted")
rec.per = mvspec(rec)
abline(v=1/4, lty="dotted")
head(soi.per$details)
tail(soi.per$details)
soi.per$details[c(10,40),]
U = qchisq(.025,2)
L = qchisq(.975,2)
# para frecuencia= 1/4
c(2*soi.per$spec[10]/L,2*soi.per$spec[10]/U)
# para frecuencia= 1
c(2*soi.per$spec[40]/L,2*soi.per$spec[40]/U)
rec.per$details[c(10,40),]
U = qchisq(.025,2)
L = qchisq(.975,2)
# para frecuencia= 1/4
c(2*rec.per$spec[10]/L,2*rec.per$spec[10]/U)
# para frecuencia= 1
c(2*rec.per$spec[40]/L,2*rec.per$spec[40]/U)
kernel('daniell',4)
plot(kernel("daniell", 4))
kernel('daniell',4)
plot(kernel("daniell", 4))
par(mfrow=c(2,1))
soi.ave = mvspec(soi, kernel('daniell',4))
abline(v = c(.25,1,2,3), lty=2)
soi.rec = mvspec(rec, kernel('daniell',4))
abline(v=c(.25,1,2,3), lty=2)
length(soi) #n
soi.ave$n.used #n'
soi.ave$Lh # L
2*9*453/480
df  = soi.ave$df       # df = 16.9875
U   = qchisq(.025, df) # U = 7.555916
L   = qchisq(.975, df) # L = 30.17425
soi.ave$spec[10]       # 0.0495202
soi.ave$spec[40]       # 0.1190800
# Intervalos de confianza
# para frecuencia= 1/4
round(c(df*soi.ave$spec[10]/L,df*soi.ave$spec[10]/U),4)
# para frecuencia= 1
round(c(df*soi.ave$spec[40]/L,df*soi.ave$spec[40]/U),4)
length(soi) #n
soi.ave$n.used #n'
soi.ave$Lh # L
2*9*453/480
U   = qchisq(.025, df) # U = 7.555916
L   = qchisq(.975, df) # L = 30.17425
soi.ave$spec[10]       # 0.0495202
soi.ave$spec[40]       # 0.1190800
# Intervalos de confianza
# para frecuencia= 1/4
round(c(df*soi.ave$spec[10]/L,df*soi.ave$spec[10]/U),4)
# para frecuencia= 1
round(c(df*soi.ave$spec[40]/L,df*soi.ave$spec[40]/U),4)
kernel("modified.daniell", c(10,10))
plot(kernel("modified.daniell", c(10,10)))
k        = kernel("modified.daniell", c(3,3))
soi.smo  = mvspec(soi, kernel=k, taper=.1)
abline(v = c(.25,1), lty=2)
## Repeat above lines with rec replacing soi
soi.smo$df           # df = 17.42618
soi.smo$bandwidth    # B  = 0.2308103
# An easier way to obtain soi.smo:
soi.smo = mvspec(soi, spans=c(7,7), taper=.1, nxm=4)
# hightlight El Nino cycle
rect(1/7, -1e5, 1/3, 1e5, density=NA, col=gray(.5,.2))
mtext("1/4", side=1, line=0, at=.25, cex=.75)
param.spec <- spec.ic(soi,  detrend=TRUE, col=4, lwd=2, nxm=4)
param.spec
tsplot(0:30, param.spec[[1]][,2:3], type='o', col=2:3, xlab='ORDER', nxm=5, lwd=2, gg=TRUE)
param.spec <- spec.ic(soi,  detrend=TRUE, col=4, lwd=2, nxm=4)
tsplot(0:30, param.spec[[1]][,2:3], type='o', col=2:3, xlab='ORDER', nxm=5, lwd=2, gg=TRUE)
param.spec[[1]][,2:3]
tsplot(0:nrow(param.spec[[1]][,2:3]), param.spec[[1]][,2:3], type='o', col=2:3, xlab='ORDER', nxm=5, lwd=2, gg=TRUE)
nrow(param.spec[[1]][,2:3])
tsplot(1:nrow(param.spec[[1]][,2:3]), param.spec[[1]][,2:3], type='o', col=2:3, xlab='ORDER', nxm=5, lwd=2, gg=TRUE)
C.info<-data.frame(param.spec[[1]])
colnames(C.info)<-c("lag","AIC","BIC")
C.info %>% gather(
key = "C.Info",
value = "value",
AIC,BIC
) %>% ggplot() +
geom_line( aes(x = lag, y = value, group=C.Info,color=C.Info))
data(robot)
plot(robot,ylab='End Position Offset',xlab='Time')
library(fpp2)
library(ggplot2)
library(forecast)
library(fpp2)
library(astsa)
library(tidyverse)
library(TSA)
data(robot)
library(ggplot2)
library(forecast)
library(fpp2)
library(astsa)
library(tidyverse)
library(TSA)
data(robot)
plot(robot,ylab='End Position Offset',xlab='Time')
acf(robot)
robot.per1 = mvspec(robot)
robot.per2 = mvspec(robot, kernel('daniell',4))
k        = kernel("modified.daniell", c(3,3))
robot.per3  = mvspec(robot, kernel=k, taper=0)
robot.per3  = mvspec(robot, kernel=k, taper=.1) #el concepto de tapering
param.specAIC <- spec.ic(robot,  col=4, lwd=2, nxm=4)
param.specBIC <- spec.ic(robot, BIC= TRUE, col=4, lwd=2, nxm=4)
param.specAIC[[1]]
robot.per1 = mvspec(robot)
robot.per2 = mvspec(robot, kernel('daniell',4))
k        = kernel("modified.daniell", c(3,3))
robot.per3  = mvspec(robot, kernel=k, taper=0)
robot.per3  = mvspec(robot, kernel=k, taper=.1) #el concepto de tapering
